# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

require_jq: &require_jq
  sh: 'command -v jq'
  msg: 'You must install jq.'
require_parallel: &require_parallel
  sh: 'command -v parallel'
  msg: 'You must install GNU Parallel.'
require_v28: &require_v28
  sh: 'test {{.TASK_MINOR_VERSION}} -ge 28'
  msg: 'Please upgrade Task to v3.28.0 or greater.'

dotenv:
  - .env.local
  - .local.env
  - .env

vars:
  TASK_MINOR_VERSION:
    sh: echo "{{.TASK_VERSION}}" | awk -F'.' '{print $2}'

tasks:
  default:
    vars:
      TARGETS:
        sh: echo $(find services -type d -maxdepth 1 -mindepth 1 -exec basename {} \;)
    preconditions:
      - *require_v28
      - *require_jq
      - *require_parallel
    silent: true
    cmds:
      - 'parallel SERVICEDIR={} task generate ::: {{.TARGETS}}'
      - task: bakefile
      - task: bake
      - task: build
      - task: push
      - task: manifest-create

  generate:
    vars:
      NAME:
        sh: |
          test -f services/{{.SERVICEDIR}}/manifest && source services/{{.SERVICEDIR}}/manifest
          (test -n "$NAME" && echo "$NAME") || (test -n "$SERVICE" && echo "$SERVICE") || echo "{{.SERVICEDIR}}"
    preconditions:
      - sh: 'test -n "{{.SERVICEDIR}}"'
        msg: 'Specify the subdirectory name of the service with a SERVICEDIR environment variable.'
      - sh: 'test -d "services/{{.SERVICEDIR}}"'
        msg: 'services/{{.SERVICEDIR}} does not exist.'
    sources:
      - services/{{.SERVICEDIR}}/**
      - templates/Dockerfile.*.template
    generates:
      - images/{{.NAME}}/*/*
      - images/{{.NAME}}/MANIFEST_LIST
    cmds:
      - scripts/generate.sh {{.SERVICEDIR}}

  bakefile:
    preconditions:
      - sh: 'test -d images'
        msg: 'Generate some Dockerfiles first using task generate.'
      - *require_jq
    cmds:
      - scripts/bakefile.sh
      - defer: rm -f newbake.json

  create-builder:
    deps:
      - buildkitd.toml
    status:
      # Exits zero (up to date) if there is already a builder.
      - docker buildx ls | grep -q '^{{.BUILDX_BUILDER}}\s'
    cmds:
      - docker buildx create
          --name "{{.BUILDX_BUILDER}}"
          --config buildkitd.toml

  buildkitd.toml:
    status:
      - grep -q "max-parallelism = ${BUILDX_MAX_PARALLELISM}\$" buildkitd.toml
    sources:
      - templates/buildkitd.template.toml
    generates:
      - ./buildkitd.toml
    cmds:
      - envsubst < templates/buildkitd.template.toml > buildkitd.toml

  bake:
    preconditions:
      - *require_jq
    status:
      # Exits zero (up to date) if there are no targets.
      - test $(jq '.target | length' bake.json) -eq 0
    deps:
      - bakefile
      - create-builder
    cmds:
      - docker buildx bake --builder '{{.BUILDX_BUILDER}}' --file ./bake.json

  build:
    preconditions:
      - *require_parallel
    status:
      # Exits zero (up to date) if there are no tarballs.
      - test -z "{{.TARBALLS}}"
    vars:
      TARBALLS:
        # We loop over any image.tar files to be sure we only build images that
        # still need to be built.
        sh: echo images/*/*/image.tar
    cmds:
      - 'parallel --jobs {{.PARALLEL_JOBS}} --retries 2 --bar --tag scripts/build.sh ::: {{.TARBALLS}}'

  push:
    preconditions:
      - *require_parallel
    status:
      # Exits zero (up to date) if there are no images OR PUSH is falsey.
      - test -z "{{.IMAGES}}" || (test "$PUSH" != "true" && test "$PUSH" != "1")
    vars:
      IMAGES:
        sh: test -d images/*/built && for x in images/*/built; do echo "$(basename $(dirname $x))"; done || true
    cmds:
      - 'parallel --jobs {{.PARALLEL_JOBS}} --retries 2 --bar --tag scripts/push.sh ::: $(echo "{{.IMAGES}}")'

  manifest-create:
    preconditions:
      - *require_v28
    status:
      - test "$PUSH" != "true" && test "$PUSH" != "1"
    sources:
      - images/*/MANIFEST_LIST
    vars:
      MANIFEST_LISTS:
        sh: echo images/*/MANIFEST_LIST
    cmds:
      - for: { var: MANIFEST_LISTS }
        task: manifest-create-one
        vars:
          MANIFEST_LIST: '{{.ITEM}}'

  manifest-create-one:
    preconditions:
      - sh: test -n "{{.MANIFEST_LIST}}"
        msg: Specify the path to the manifest list you would like to create with MANIFEST_LIST variable.
      - sh: test -s "{{.MANIFEST_LIST}}"
        msg: The manifest list {{.MANIFEST_LIST}} does not exist or is empty.
    status:
      - test "$PUSH" != "true" && test "$PUSH" != "1"
    cmds:
      - scripts/manifest.sh {{.MANIFEST_LIST}}

  clean:
    preconditions:
      - *require_v28
    vars:
      IMAGES:
        sh: for x in images/*; do echo "$(basename $x)"; done
    cmds:
      - rm -f bake.json buildkitd.toml
      - rm -Rf images
      - for: { var: IMAGES, as: IMAGE }
        cmd: docker rmi --force $(docker images ls --filter=reference="{{.NAMESPACE}}/{{.IMAGE}}" -q | sort | uniq) || true
