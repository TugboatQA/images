# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

dotenv:
  - .env.local
  - .local.env
  - .env

vars:
  TARGETS:
    sh: find services -type d -maxdepth 1 -mindepth 1 -exec basename {} \;
  TASK_MINOR_VERSION:
    sh: echo "{{.TASK_VERSION}}" | awk -F'.' '{print $2}'
  BUILDX_BUILDER: tugboatqa-bakery

env:
  OVERWRITE: false

tasks:
  default:
    preconditions:
      - sh: 'test {{.TASK_MINOR_VERSION}} -ge 28'
        msg: 'Please upgrade Task to v3.28.0 or greater.'
    silent: true
    cmds:
      - for: { var: TARGETS }
        task: generate
        vars:
          SERVICEDIR: '{{.ITEM}}'
      - task: bake
      - task: build
      - task: push

  generate:
    vars:
      NAME:
        sh: |
          test -f services/{{.SERVICEDIR}}/manifest && source services/{{.SERVICEDIR}}/manifest
          (test -n "$NAME" && echo "$NAME") || (test -n "$SERVICE" && echo "$SERVICE") || echo "{{.SERVICEDIR}}"
    preconditions:
      - sh: 'test -n "{{.SERVICEDIR}}"'
        msg: 'Specify the directory name of the service with a SERVICEDIR environment variable.'
    status:
      - test -f images/{{.NAME}}/{{.SERVICEDIR}}
    cmds:
      - scripts/generate.sh {{.SERVICEDIR}}
      - touch images/{{.NAME}}/{{.SERVICEDIR}}

  bakefile:
    preconditions:
      - sh: 'test -d images'
        msg: 'Generate some Dockerfiles first using task generate.'
    cmds:
      - scripts/bakefile.sh

  create-builder:
    deps:
      - buildkitd.toml
    status:
      - docker buildx ls | grep -q '^{{.BUILDX_BUILDER}}\s'
    cmds:
      - docker buildx create
        --name "{{.BUILDX_BUILDER}}"
        --config buildkitd.toml

  buildkitd.toml:
    generates:
      - ./buildkitd.toml
    cmds:
      - envsubst < templates/buildkitd.template.toml > buildkitd.toml
    status:
      - grep -q "max-parallelism = ${BUILDX_MAX_PARALLELISM}\$" buildkitd.toml

  bake:
    preconditions:
      - sh: test $(jq '.target | length' bake.json) -ne 0
        msg: No targets to bake!
    generates:
      - images/*/*/image.tar
    deps:
      - bakefile
      - create-builder
    cmds:
      - docker buildx bake --builder '{{.BUILDX_BUILDER}}' --file ./bake.json

  build:
    preconditions:
      - sh: 'test {{.TASK_MINOR_VERSION}} -ge 28'
        msg: 'Please upgrade Task to v3.28.0 or greater.'
    vars:
      IMAGES:
        sh: echo images/*/*/image.tar
    sources:
      - images/*/*/image.tar
    generates:
      - images/*/built
    method: timestamp
    cmds:
      - for: { var: IMAGES }
        task: build-one
        vars:
          TARBALL: '{{.ITEM}}'

  build-one:
    preconditions:
      - sh: test -n "{{.TARBALL}}"
        msg: Specify the tarball you would like to build with TARBALL variable
    cmds:
      - scripts/build.sh "{{.TARBALL}}"

  push:
    preconditions:
      - sh: 'test {{.TASK_MINOR_VERSION}} -ge 28'
        msg: 'Please upgrade Task to v3.28.0 or greater.'
    vars:
      IMAGES:
        sh: for x in images/*/built; do echo "$(basename $(dirname $x))"; done
    cmds:
      - for: { var: IMAGES }
        task: push-one
        vars:
          IMAGE: '{{.ITEM}}'

  push-one:
    sources:
      - images/{{.IMAGE}}/built
    generates:
      - images/{{.IMAGE}}/pushed
    preconditions:
      - sh: test -n "{{.IMAGE}}"
        msg: Specify the image you would like to push with IMAGE variable
    cmds:
      - docker push --all-tags "{{.NAMESPACE}}/{{.IMAGE}}"
      - touch images/{{.IMAGE}}/pushed

  clean:
    preconditions:
      - sh: 'test {{.TASK_MINOR_VERSION}} -ge 28'
        msg: 'Please upgrade Task to v3.28.0 or greater.'
    vars:
      IMAGES:
        sh: for x in images/*; do echo "$(basename $x)"; done
    cmds:
      - for: { var: IMAGES, as: IMAGE }
        cmd: docker rmi --force $(docker images ls --filter=reference="{{.NAMESPACE}}/{{.IMAGE}}" -q | sort | uniq)
      - rm -f bake.json buildkitd.toml
      - rm -Rf images
