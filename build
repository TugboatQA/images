#!/usr/bin/env bash

set -e

NAMESPACE=${NAMESPACE:-tugboatqa}

DIR="services/$1"

if [ -e "${DIR}/manifest" ]; then
    source "${DIR}/manifest"
fi

NAME=${NAME:-$1}
SERVICE=${SERVICE:-$NAME}

build() {
    PLATFORM="$1"

    echo Building "$PLATFORM" docker image from "$DOCKERFILE"

    docker build --platform "$PLATFORM" --pull -t "$IMAGE" .

    # Strip volumes
    TEMP=$(mktemp -d)
    docker save "$IMAGE" | tar -C "${TEMP}" -x
    CONFIG=$(jq -r '.[0].Config' "${TEMP}/manifest.json")
    jq 'del(.config.Volumes,.config.Entrypoint)' "${TEMP}/${CONFIG}" > "${TEMP}/config.json"
    mv "${TEMP}/config.json" "${TEMP}/${CONFIG}"
    tar -C "${TEMP}" -c . | docker load
    rm -rf "${TEMP}"
}

for DOCKERFILE in images/"${SERVICE}"/**/Dockerfile; do
    pushd "$(dirname "$DOCKERFILE")"

    NAME=$(cat NAME)
    TAG=$(cut -d' ' -f1 < TAGS)
    # shellcheck disable=SC2207
    ALIASES=($(cut -d' ' -f2- < TAGS))
    # Prefix each alias with the namespace and name
    ALIASES=("${ALIASES[@]/#/${NAMESPACE}/${NAME}:}")
    IMAGE=${NAMESPACE}/${NAME}:${TAG}

    # Build the default platform image for amd64.
    build linux/amd64

    for ALIAS in "${ALIASES[@]}"; do
        docker tag "${IMAGE}" "${ALIAS}"
    done

    # Build other platforms if they are defined, but only if we are pushing.
    if [[ -n "${OTHER_PLATFORMS}" ]] && [[ "$push_and_rm" = 1 ]]; then
        ROOT_MANIFEST=$IMAGE
        for PLATFORM in $(echo "${OTHER_PLATFORMS//,/\n}"); do
            # Add a suffix to the tag with the platform, e.g. "-linux-arm64"
            TAG="$(cut -d' ' -f1 < TAGS)-${PLATFORM//\//-}"
            IMAGE=${NAMESPACE}/${NAME}:${TAG}
            build "$PLATFORM"
        done
        docker push --all-tags "${NAMESPACE}/${NAME}"
        for MANIFEST in "$ROOT_MANIFEST" "${ALIASES[@]}"; do
            echo "Creating multi-platform manifest list $MANIFEST to add $IMAGE"
            docker manifest rm "$MANIFEST" 2>/dev/null || true
            docker manifest create "$MANIFEST" "$MANIFEST" "$IMAGE"
            docker manifest push "$MANIFEST"
            docker manifest rm "$MANIFEST"
        done
        # shellcheck disable=SC2046
        docker rmi --force $(docker images ls --filter=reference="${NAMESPACE}/${NAME}" -q | sort | uniq)
    fi

    popd
done

# If we didn't have other platforms to build, push all tags and clean up.
if [[ "$push_and_rm" = 1 ]] && [[ -z "${OTHER_PLATFORMS}" ]]; then
    docker push --all-tags "${NAMESPACE}/${NAME}"
    # shellcheck disable=SC2046
    docker rmi --force $(docker images ls --filter=reference="${NAMESPACE}/${NAME}" -q | sort | uniq)
fi
